{"version":3,"sources":["Components/ContactsForm/ContactsForm.jsx","Components/Filter/Filter.jsx","Components/ContactsList/ContactsList.jsx","Components/App.jsx","index.js"],"names":["ContactsForm","onHandleSubmit","useState","name","setName","number","setNumber","change","e","target","value","reset","onSubmit","preventDefault","onChange","type","placeholder","pattern","title","required","Filter","filtered","ContactsList","contacts","deleteContact","map","id","className","onClick","App","JSON","parse","window","localStorage","getItem","data","setContacts","filter","setFilter","useEffect","setItem","stringify","addContact","uuidv4","find","contact","toLowerCase","alert","prevContacts","prev","includes","ReactDOM","render","document","getElementById"],"mappings":"uPAGe,SAASA,EAAT,GAA2C,IAAnBC,EAAkB,EAAlBA,eACnC,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAS,SAACC,GACZ,MAAwBA,EAAEC,OAAlBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MACd,OAAQP,GACJ,IAAK,OACDC,EAAQM,GACR,MACJ,IAAK,SACDJ,EAAUI,GACV,MACJ,QACI,SASNC,EAAQ,WACVP,EAAQ,IACRE,EAAU,KAEd,OACI,uBAAMM,SAVK,SAACJ,GACZA,EAAEK,iBACFZ,EAAe,CAAEE,OAAME,WACvBM,KAOA,UACI,uBACIG,SAAUP,EACVQ,KAAK,OACLZ,KAAK,OACLO,MAAOP,EACPa,YAAY,kBACZC,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,IAEZ,uBACIL,SAAUP,EACVS,YAAY,0BACZD,KAAK,MACLZ,KAAK,SACLO,MAAOL,EACPY,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,IAEZ,wBAAQJ,KAAK,SAAb,uBClDZ,IAWeK,EAXA,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,SAAUX,EAAW,EAAXA,MACvB,OACI,uBAAOK,KAAK,OAAOZ,KAAK,SAASO,MAAOA,EAAOI,SAAU,SAACN,GAAD,OAAMa,EAASb,O,OCgCjEc,EAjCM,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,cAC7B,OACI,6BACKD,EAASE,KAAI,gBAAGtB,EAAH,EAAGA,KAAME,EAAT,EAASA,OAAQqB,EAAjB,EAAiBA,GAAjB,OACV,+BACI,cAAC,IAAD,CAAYC,UAAU,SACrB,8BACRxB,EADQ,KACAE,KAEX,wBACEsB,UAAU,YACVZ,KAAK,SACLa,QAAS,kBAAMJ,EAAcE,IAH/B,sBALeA,S,OCAV,SAASG,IACpB,MAAgC3B,oBAAS,WAAO,IAAD,EAC3C,iBACI4B,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,oBAD3C,QAC0DC,KAF9D,mBAAOZ,EAAP,KAAiBa,EAAjB,KAKA,EAA4BlC,mBAAS,IAArC,mBAAOmC,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACNP,OAAOC,aAAaO,QAAQ,WAAYV,KAAKW,UAAUlB,MACxD,CAACA,IA4BJ,OACK,gCACP,2CACc,cAACvB,EAAD,CAAcC,eA7BJ,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OACzBqC,EAAa,CACjBhB,GAAIiB,cACJxC,OACAE,UAGFkB,EAASqB,MACP,SAAAC,GAAO,OAAIA,EAAQ1C,KAAK2C,gBAAkBJ,EAAWvC,KAAK2C,iBAExDC,MAAM,GAAD,OAAI5C,EAAJ,4BACLiC,GAAY,SAAAY,GAAY,OAAKN,GAAL,mBAAoBM,UAoBlD,0CACc,cAAC,EAAD,CAAQtC,MAAO2B,EAAQhB,SAdT,SAACb,GACvB8B,EAAU9B,EAAEC,OAAOC,UAcX,cAAC,EAAD,CAAcc,cAnBJ,SAACE,GACnBU,GAAY,SAAAa,GAAI,OAAEA,EAAKZ,QAAO,SAAAQ,GAAO,OAAEA,EAAQnB,KAAOA,SAkBFH,SAV7CA,EAASc,QAAO,SAAAQ,GAAO,OAAGA,EAAQ1C,KAAK2C,cAAcI,SAASb,EAAOS,uBCrCpFK,IAASC,OAAO,cAACvB,EAAD,IAAOwB,SAASC,eAAe,U","file":"static/js/main.6e7babb1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function ContactsForm({ onHandleSubmit }) {\r\n    const [name, setName] = useState(\"\");\r\n    const [number, setNumber] = useState(\"\");\r\n\r\n    const change = (e) => {\r\n        const { name, value } = e.target;\r\n        switch (name) {\r\n            case \"name\":\r\n                setName(value);\r\n                break;\r\n            case \"number\":\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const submit = (e) => {\r\n        e.preventDefault();\r\n        onHandleSubmit({ name, number });\r\n        reset();\r\n    };\r\n    const reset = () => {\r\n        setName(\"\");\r\n        setNumber(\"\");\r\n    };\r\n    return (\r\n        <form onSubmit={submit}>\r\n            <input\r\n                onChange={change}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                value={name}\r\n                placeholder=\"Enter your name\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n            />\r\n            <input\r\n                onChange={change}\r\n                placeholder=\"Enter your phone number\"\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                value={number}\r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                required\r\n            />\r\n            <button type=\"submit\">Submit</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nContactsForm.propTypes = {\r\n    onHandleSubmit: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nconst Filter = ({filtered, value}) => {\r\n    return (\r\n        <input type='text' name='filter' value={value} onChange={(e)=> filtered(e)}/>\r\n    )\r\n}\r\n\r\nFilter.propTypes = {\r\n    filtered:PropTypes.func.isRequired,\r\n    value:PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Filter\r\n\r\n","import React from 'react'\r\nimport { FcContacts } from 'react-icons/fc'\r\nimport PropTypes from 'prop-types'\r\nconst ContactsList = ({contacts, deleteContact}) => {\r\n    return (\r\n        <ul>\r\n            {contacts.map(({ name, number, id }) => (\r\n                <li key={id}>\r\n                    <FcContacts className='icon' />\r\n                     <p>\r\n            {name}: {number}\r\n          </p>\r\n          <button\r\n            className='btnDelete'\r\n            type=\"button\"\r\n            onClick={() => deleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n}\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      number:PropTypes.string,\r\n      id:PropTypes.string,\r\n      })\r\n    ),\r\n    deleteContact:PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ContactsList;","import React, { useState,useEffect } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport ContactsForm from './ContactsForm/ContactsForm'\r\nimport Filter from './Filter/Filter'\r\nimport ContactsList from './ContactsList/ContactsList'\r\nimport data from './data';\r\n\r\nexport default function App() {\r\n    const [contacts, setContacts] = useState(() => {\r\n        return (\r\n            JSON.parse(window.localStorage.getItem('contacts'))?? data\r\n        )\r\n    })\r\n    const [filter, setFilter] = useState('')\r\n    \r\n    useEffect(() => {\r\n        window.localStorage.setItem('contacts', JSON.stringify(contacts))\r\n    }, [contacts])\r\n    \r\n    const submitContact = ({ name, number }) => {\r\n    const addContact = {\r\n      id: uuidv4(),\r\n      name,\r\n      number,\r\n    };\r\n\r\n    contacts.find(\r\n      contact => contact.name.toLowerCase() === addContact.name.toLowerCase(),\r\n    )\r\n      ? alert(`${name} is already in contacts`)\r\n      : setContacts(prevContacts => [addContact, ...prevContacts]);\r\n  };\r\n\r\n    const deleteContact = (id) => {\r\n        setContacts(prev=>prev.filter(contact=>contact.id !== id))\r\n    }\r\n\r\n    const changeFilterInput = (e) => {\r\n        setFilter(e.target.value)\r\n    }\r\n\r\n    const onFilteredContacts = () => {\r\n        return contacts.filter(contact=> contact.name.toLowerCase().includes(filter.toLowerCase()))\r\n    }\r\n\r\n    return (\r\n         <div>\r\n  <h1>Phonebook</h1>\r\n                <ContactsForm onHandleSubmit={submitContact}/>\r\n\r\n  <h2>Contacts</h2>\r\n                <Filter value={filter} filtered={changeFilterInput}/>\r\n                <ContactsList deleteContact={deleteContact} contacts={onFilteredContacts()}/>\r\n</div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App.jsx';\n\nReactDOM.render(<App/>,document.getElementById('root'));\n"],"sourceRoot":""}